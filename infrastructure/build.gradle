subprojects {
  apply plugin: "java"
  apply plugin: "io.spring.dependency-management"
  apply plugin: "org.springframework.boot"
  apply plugin: "com.bmuschko.docker-spring-boot-application"

  repositories {
    mavenCentral()
  }

  dependencies {
    annotationProcessor "org.projectlombok:lombok:${ver.lombok}"
    compileOnly "org.projectlombok:lombok:${ver.lombok}"
    testAnnotationProcessor "org.projectlombok:lombok:${ver.lombok}"
    testCompileOnly "org.projectlombok:lombok:${ver.lombok}"

    implementation "org.slf4j:slf4j-api"
    implementation "org.springframework.boot:spring-boot-starter"

    testCompileOnly "junit:junit:${ver.junit4}"

    testImplementation "org.slf4j:slf4j-api"
    testImplementation "ch.qos.logback:logback-classic"
    testImplementation "org.junit.jupiter:junit-jupiter-api:${ver.junit5}"
    testImplementation "org.junit.jupiter:junit-jupiter-params:${ver.junit5}"
    testImplementation "org.assertj:assertj-core:${ver.assertj}"
    testImplementation "org.springframework.boot:spring-boot-starter-test"

    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${ver.junit5}"
    testRuntimeOnly "org.junit.vintage:junit-vintage-engine:${ver.junit5}"
  }

  dependencyManagement {
    imports {
      mavenBom "org.springframework.cloud:spring-cloud-dependencies:${ver.springCloud}"
    }
  }

  sourceSets {
    main {
      java {
        exclude excludeKeepDirPattern
      }
      resources {
        exclude excludeKeepDirPattern
      }
    }

    test {
      java {
        exclude excludeKeepDirPattern
      }
      resources {
        exclude excludeKeepDirPattern
      }
    }
  }

  test {
    useJUnitPlatform()

    testLogging {
      showStandardStreams = true
      events "SKIPPED", "FAILED"
    }
  }

  docker {
    springBootApplication {
      baseImage = dockerImageJava
      maintainer = dockerLabelMaintainer
    }
  }

}

project(":infrastructure:todo-config-server") {
  version = "${ver.projectMajor}.1.0"

  dependencies {
    implementation "org.springframework.cloud:spring-cloud-config-server"
  }

  springBoot {
    mainClassName = "io.agatsenko.todo.infrastructure.TodoConfigServerApp"
  }

  docker {
    springBootApplication {
      tag = "${project.rootProject.name}/${project.name}:${project.version}"
    }
  }
}

project(":infrastructure:todo-eureka-server") {
  version = "${ver.projectMajor}.1.0"

  dependencies {
    implementation "org.springframework.cloud:spring-cloud-starter-config"
    implementation "org.springframework.cloud:spring-cloud-starter-netflix-eureka-server"
    // it's required for java 9+
    implementation "org.glassfish.jaxb:jaxb-runtime"
  }

  springBoot {
    mainClassName = "io.agatsenko.todo.infrastructure.eureka.TodoEurekaServerApp"
  }

  docker {
    springBootApplication {
      tag = "${project.rootProject.name}/${project.name}:${project.version}"
    }
  }
}

project(":infrastructure:todo-zuul-server") {
  version = "${ver.projectMajor}.1.0"

  dependencies {
    implementation "org.springframework.cloud:spring-cloud-starter-config"
    implementation "org.springframework.cloud:spring-cloud-starter-netflix-eureka-client"
    implementation "org.springframework.cloud:spring-cloud-starter-netflix-zuul"
  }

  springBoot {
    mainClassName = "io.agatsenko.todo.infrastructure.zuul.TodoZuulGatewayServer"
  }

  docker {
    springBootApplication {
      tag = "${project.rootProject.name}/${project.name}:${project.version}"
    }
  }
}

